From e76c31658c974107121a6e51ed76e99450ebba6b Mon Sep 17 00:00:00 2001
From: willcl-ark <will@256k1.dev>
Date: Fri, 21 Feb 2025 16:14:58 +0000
Subject: [PATCH] validation: assumeutxo benchmarking patches

---
 src/init.cpp                        | 59 ++++++++++++++++++++++++++++-
 src/kernel/chainstatemanager_opts.h |  2 +
 src/node/chainstatemanager_args.cpp |  2 +
 src/node/chainstatemanager_args.h   |  2 +
 src/validation.cpp                  |  6 +++
 src/validation.h                    |  4 +-
 6 files changed, 71 insertions(+), 4 deletions(-)

diff --git a/src/init.cpp b/src/init.cpp
index 3cfd301fbab..7a8a68f0bd5 100644
--- a/src/init.cpp
+++ b/src/init.cpp
@@ -56,6 +56,7 @@
 #include <node/mempool_persist_args.h>
 #include <node/miner.h>
 #include <node/peerman_args.h>
+#include <node/utxo_snapshot.h>
 #include <policy/feerate.h>
 #include <policy/fees.h>
 #include <policy/fees_args.h>
@@ -141,6 +142,7 @@ using node::VerifyLoadedChainstate;
 using util::Join;
 using util::ReplaceAll;
 using util::ToString;
+using node::SnapshotMetadata;
 
 static constexpr bool DEFAULT_PROXYRANDOMIZE{true};
 static constexpr bool DEFAULT_REST_ENABLE{false};
@@ -159,6 +161,44 @@ static constexpr bool DEFAULT_STOPAFTERBLOCKIMPORT{false};
 static constexpr int MIN_CORE_FDS = MIN_LEVELDB_FDS + NUM_FDS_MESSAGE_CAPTURE;
 static const char* DEFAULT_ASMAP_FILENAME="ip_asn.map";
 
+bool LoadUTXOSnapshot(NodeContext& node, const fs::path& snapshot_path) {
+    ChainstateManager& chainman = *node.chainman;
+
+    FILE* file{fsbridge::fopen(snapshot_path, "rb")};
+    AutoFile afile{file};
+    if (afile.IsNull()) {
+        LogPrintf("Error: Couldn't open UTXO snapshot file %s for reading\n", snapshot_path.utf8string());
+        return false;
+    }
+
+    SnapshotMetadata metadata{chainman.GetParams().MessageStart()};
+    try {
+        afile >> metadata;
+    } catch (const std::ios_base::failure& e) {
+        LogPrintf("Error: Unable to parse snapshot metadata: %s\n", e.what());
+        return false;
+    }
+
+    auto activation_result{chainman.ActivateSnapshot(afile, metadata, false)};
+    if (!activation_result) {
+        LogPrintf("Error: Unable to load UTXO snapshot: %s\n",
+                  util::ErrorString(activation_result).original);
+        return false;
+    }
+
+    // Update services to reflect limited peer capabilities during sync
+    node.connman->RemoveLocalServices(NODE_NETWORK);
+    node.connman->AddLocalServices(NODE_NETWORK_LIMITED);
+
+    CBlockIndex& snapshot_index{*CHECK_NONFATAL(*activation_result)};
+    LogPrintf("Loaded UTXO snapshot: coins=%d, height=%d, hash=%s\n",
+              metadata.m_coins_count,
+              snapshot_index.nHeight,
+              snapshot_index.GetBlockHash().ToString());
+
+    return true;
+}
+
 /**
  * The PID file facilities.
  */
@@ -498,6 +538,12 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)
     argsman.AddArg("-minimumchainwork=<hex>", strprintf("Minimum work assumed to exist on a valid chain in hex (default: %s, testnet3: %s, testnet4: %s, signet: %s)", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnet4ChainParams->GetConsensus().nMinimumChainWork.GetHex(), signetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);
     argsman.AddArg("-par=<n>", strprintf("Set the number of script verification threads (0 = auto, up to %d, <0 = leave that many cores free, default: %d)",
         MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);
+    argsman.AddArg("-pausebackgroundsync", strprintf("When a UTXO snapshot is loaded, pause the verification of historical blocks in the background (default: %u)", DEFAULT_PAUSE_BACKGROUND_SYNC), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);
+    gArgs.AddArg("-loadutxosnapshot=<path>",
+                 "Load UTXO set from snapshot file at startup. "
+                 "This allows fast synchronization by loading a pre-built UTXO "
+                 "snapshot while the full chain validation happens in background.",
+                 ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);
     argsman.AddArg("-persistmempool", strprintf("Whether to save the mempool on shutdown and load on restart (default: %u)", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);
     argsman.AddArg("-persistmempoolv1",
                    strprintf("Whether a mempool.dat file created by -persistmempool or the savemempool RPC will be written in the legacy format "
@@ -1704,6 +1750,15 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)
 
     ChainstateManager& chainman = *Assert(node.chainman);
 
+    if (args.IsArgSet("-loadutxosnapshot")) {
+        fs::path snapshot_path = fs::u8path(args.GetArg("-loadutxosnapshot", ""));
+        snapshot_path = AbsPathForConfigVal(args, snapshot_path);
+
+        if (!LoadUTXOSnapshot(node, snapshot_path)) {
+            LogPrintf("Failed to load UTXO snapshot from %s", snapshot_path.utf8string());
+        }
+    }
+
     assert(!node.peerman);
     node.peerman = PeerManager::make(*node.connman, *node.addrman,
                                      node.banman.get(), chainman,
@@ -1853,7 +1908,9 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)
         });
     }
 
-    if (ShutdownRequested(node)) {
+    // if loadutxosnapshot is set, we want to load the snapshot then shut down so that only
+    // syncing to chaintip is benchmarked
+    if (ShutdownRequested(node) || args.IsArgSet("-loadutxosnapshot")) {
         return false;
     }
 
diff --git a/src/kernel/chainstatemanager_opts.h b/src/kernel/chainstatemanager_opts.h
index 15a8fbec618..50da120ea74 100644
--- a/src/kernel/chainstatemanager_opts.h
+++ b/src/kernel/chainstatemanager_opts.h
@@ -50,6 +50,8 @@ struct ChainstateManagerOpts {
     int worker_threads_num{0};
     size_t script_execution_cache_bytes{DEFAULT_SCRIPT_EXECUTION_CACHE_BYTES};
     size_t signature_cache_bytes{DEFAULT_SIGNATURE_CACHE_BYTES};
+    //! Whether to defer syncing the background chainstate after an assumeutxo snapshot is loaded
+    bool pause_background_sync{false};
 };
 
 } // namespace kernel
diff --git a/src/node/chainstatemanager_args.cpp b/src/node/chainstatemanager_args.cpp
index db36d03fd5c..6782d787238 100644
--- a/src/node/chainstatemanager_args.cpp
+++ b/src/node/chainstatemanager_args.cpp
@@ -71,6 +71,8 @@ util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManage
         opts.signature_cache_bytes = clamped_size_each;
     }
 
+    opts.pause_background_sync = args.GetBoolArg("-pausebackgroundsync", DEFAULT_PAUSE_BACKGROUND_SYNC);
+
     return {};
 }
 } // namespace node
diff --git a/src/node/chainstatemanager_args.h b/src/node/chainstatemanager_args.h
index af13aa8d3ce..e20b3fc799d 100644
--- a/src/node/chainstatemanager_args.h
+++ b/src/node/chainstatemanager_args.h
@@ -12,6 +12,8 @@ class ArgsManager;
 
 /** -par default (number of script-checking threads, 0 = auto) */
 static constexpr int DEFAULT_SCRIPTCHECK_THREADS{0};
+/** -pausebackgroundsync default */
+static const bool DEFAULT_PAUSE_BACKGROUND_SYNC{false};
 
 namespace node {
 [[nodiscard]] util::Result<void> ApplyArgsManOptions(const ArgsManager& args, ChainstateManager::Options& opts);
diff --git a/src/validation.cpp b/src/validation.cpp
index 93da4f326d4..c12993471b6 100644
--- a/src/validation.cpp
+++ b/src/validation.cpp
@@ -6462,6 +6462,12 @@ void ChainstateManager::RecalculateBestHeader()
     }
 }
 
+bool ChainstateManager::BackgroundSyncInProgress() const EXCLUSIVE_LOCKS_REQUIRED(GetMutex()) {
+    if (!IsUsable(m_snapshot_chainstate.get())) return false;
+    if (!IsUsable(m_ibd_chainstate.get())) return false;
+    return !m_options.pause_background_sync;
+}
+
 bool ChainstateManager::ValidatedSnapshotCleanup()
 {
     AssertLockHeld(::cs_main);
diff --git a/src/validation.h b/src/validation.h
index 9e4fdbe6809..0cb571910dd 100644
--- a/src/validation.h
+++ b/src/validation.h
@@ -1113,9 +1113,7 @@ public:
     CBlockIndex* ActiveTip() const EXCLUSIVE_LOCKS_REQUIRED(GetMutex()) { return ActiveChain().Tip(); }
 
     //! The state of a background sync (for net processing)
-    bool BackgroundSyncInProgress() const EXCLUSIVE_LOCKS_REQUIRED(GetMutex()) {
-        return IsUsable(m_snapshot_chainstate.get()) && IsUsable(m_ibd_chainstate.get());
-    }
+    bool BackgroundSyncInProgress() const EXCLUSIVE_LOCKS_REQUIRED(GetMutex());
 
     //! The tip of the background sync chain
     const CBlockIndex* GetBackgroundSyncTip() const EXCLUSIVE_LOCKS_REQUIRED(GetMutex()) {
-- 
2.43.0

